package org.victorrobotics.devilscoutserver;

import static io.javalin.apibuilder.ApiBuilder.delete;
import static io.javalin.apibuilder.ApiBuilder.get;
import static io.javalin.apibuilder.ApiBuilder.patch;
import static io.javalin.apibuilder.ApiBuilder.path;
import static io.javalin.apibuilder.ApiBuilder.post;

import org.victorrobotics.bluealliance.Endpoint;
import org.victorrobotics.devilscoutserver.controller.Controller;
import org.victorrobotics.devilscoutserver.controller.EventController;
import org.victorrobotics.devilscoutserver.controller.QuestionController;
import org.victorrobotics.devilscoutserver.controller.SessionController;
import org.victorrobotics.devilscoutserver.controller.TeamController;
import org.victorrobotics.devilscoutserver.controller.UserController;
import org.victorrobotics.devilscoutserver.database.Database;
import org.victorrobotics.devilscoutserver.database.TeamDatabase;
import org.victorrobotics.devilscoutserver.database.UserDatabase;
import org.victorrobotics.devilscoutserver.tba.data.EventInfoCache;
import org.victorrobotics.devilscoutserver.tba.data.EventTeamsCache;
import org.victorrobotics.devilscoutserver.tba.data.MatchScheduleCache;
import org.victorrobotics.devilscoutserver.tba.data.TeamInfoCache;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import io.javalin.Javalin;
import io.javalin.http.Handler;
import io.javalin.http.HttpResponseException;
import io.javalin.openapi.ApiKeyAuth;
import io.javalin.openapi.plugin.OpenApiPlugin;
import io.javalin.openapi.plugin.OpenApiPluginConfiguration;
import io.javalin.openapi.plugin.SecurityComponentConfiguration;
import io.javalin.openapi.plugin.swagger.SwaggerConfiguration;
import io.javalin.openapi.plugin.swagger.SwaggerPlugin;

public class Server {
  private static final Handler UNIMPLEMENTED = ctx -> ctx.result("UNIMPLEMENTED");

  private static final String API_DESCRIPTION =
      """
          ## Overview
          Information and statistics on FRC competitions, pooled together by all registered teams.
          ## Authentication
          All endpoints (except for `/login` and `/auth`) require a session key to be passed in the header
          `%s`. This will be generated by the server upon successful authentication.
          """.formatted(Controller.SESSION_HEADER);
  private static final String TAGS_SORTER     = """
      /* INJECTED */ (a,b) => {
        const tagOrder = ['Authentication', 'Event Data', 'Questions', 'Teams', 'Users'];
        return tagOrder.indexOf(a) - tagOrder.indexOf(b);
      }
      """;
  // Hack to inject directly instead of serving file
  private static final String REMOVE_TOP_BAR = """
      '></script><script>
        /* INJECTED */
        let onLoad = window.onload;
        window.onload = function() {
          onLoad();
          let topbar = document.getElementsByClassName('topbar')[0];
          topbar.parentNode.removeChild(topbar);
        };
      </script><script src='""";

  private final Javalin javalin;

  public Server() {
    javalin = Javalin.create(config -> {
      config.http.prefer405over404 = true;

      // @format:off
      config.plugins.register(new OpenApiPlugin(
        new OpenApiPluginConfiguration()
          .withDocumentationPath("/openapi/json")
          .withDefinitionConfiguration((version, definition) -> definition
            .withOpenApiInfo(openApiInfo -> {
              openApiInfo.setTitle("DevilScout Server");
              openApiInfo.setVersion("alpha");
              openApiInfo.setDescription(API_DESCRIPTION);
            })
            .withSecurity(new SecurityComponentConfiguration()
              .withSecurityScheme("Session", new ApiKeyAuth() {
                @Override
                public String getName() {
                  return Controller.SESSION_HEADER;
                }
              })
            )
          )
        )
      );
      // @format:on

      SwaggerConfiguration uiConfig = new SwaggerConfiguration();
      uiConfig.setTitle("DevilScout Server API");
      uiConfig.setDocumentationPath("/openapi/json");
      uiConfig.setUiPath("/openapi/ui");
      uiConfig.setTagsSorter(TAGS_SORTER);
      uiConfig.injectJavaScript(REMOVE_TOP_BAR);
      config.plugins.register(new SwaggerPlugin(uiConfig));
    });

    javalin.routes(() -> {
      post("login", SessionController::login);
      post("auth", SessionController::auth);
      get("session", SessionController::getSession);
      delete("logout", SessionController::logout);

      path("events", () -> {
        get(EventController::getAllEvents);

        path("{event}", () -> {
          get(EventController::getEvent);
          get("teams", EventController::getTeams);
          get("match-schedule", EventController::getMatchSchedule);
        });
      });

      path("questions", () -> {
        get("match", QuestionController::matchQuestions);
        get("pit", QuestionController::pitQuestions);
        get("drive-team", QuestionController::driveTeamQuestions);
      });

      path("scout", () -> {
        post("match", UNIMPLEMENTED); // upload a match scouting record
        post("pit", UNIMPLEMENTED); // upload a pit scouting record
        post("drive-team", UNIMPLEMENTED); // upload a post-match record (ADMIN)
      });

      path("analysis", () -> {
        get("teams", UNIMPLEMENTED); // summaries by team at current event
        post("simulation", UNIMPLEMENTED); // request match simulation
        post("optimization", UNIMPLEMENTED); // request alliance optimization
      });

      path("teams", () -> {
        get(TeamController::teamList);
        post(TeamController::registerTeam);

        path("{team}", () -> {
          get(TeamController::getTeam);
          delete(TeamController::unregisterTeam);
          patch(TeamController::editTeam);
          get("users", TeamController::usersOnTeam);
        });
      });

      path("users", () -> {
        get(UserController::allUsers);
        post(UserController::registerUser);

        path("{id}", () -> {
          get(UserController::getUser);
          delete(UserController::deleteUser);
          patch(UserController::editUser);
        });
      });

      get("dev_session/{accessLevel}", SessionController::generateDevSession);
    });

    javalin.exception(HttpResponseException.class, (e, ctx) -> {
      int status = e.getStatus();
      ctx.status(status);
      if (status >= 400) {
        ctx.json(new Controller.Error(e.getMessage()));
      }
    });
    javalin.exception(Exception.class, (e, ctx) -> {
      ctx.status(500);
      ctx.json(new Controller.Error(e.getMessage()));
      e.printStackTrace();
    });
  }

  public void start() {
    javalin.start(8000);
  }

  public void stop() {
    javalin.stop();
  }

  @SuppressWarnings("java:S2095") // close the executor
  public static void main(String... args) {
    Database.initConnectionPool();

    Controller.setUserDB(new UserDatabase());
    Controller.setTeamDB(new TeamDatabase());

    Controller.setEventInfoCache(new EventInfoCache());
    Controller.setTeamInfoCache(new TeamInfoCache());
    Controller.setEventTeamsCache(new EventTeamsCache(Controller.teamInfoCache()));
    Controller.setMatchScheduleCache(new MatchScheduleCache());

    Endpoint.setExecutor(Executors.newFixedThreadPool(16));

    ScheduledExecutorService executor = Executors.newScheduledThreadPool(4);
    executor.scheduleAtFixedRate(Controller.eventCache()::refresh, 0, 5, TimeUnit.MINUTES);
    executor.scheduleAtFixedRate(Controller.matchScheduleCache()::refresh, 0, 1, TimeUnit.MINUTES);
    executor.scheduleAtFixedRate(() -> {
      Controller.teamInfoCache()
                .refresh();
      Controller.eventTeamsCache()
                .refresh();
    }, 0, 5, TimeUnit.MINUTES);

    Server server = new Server();
    server.start();
  }
}
